/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package id.koneko096.swagger.api;

import id.koneko096.swagger.data.model.Citizen;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-11-20T18:37:09.423+07:00")

@Api(value = "citizen", description = "the citizen API")
public interface CitizenApi {

    @ApiOperation(value = "Create citizen", notes = "Creates a new Citizen", response = Citizen.class, tags={ "citizen", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Citizen.class),
        @ApiResponse(code = 400, message = "Invalid input", response = Void.class) })
    
    @RequestMapping(value = "/citizen",
        produces = { "application/json" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.POST)
    ResponseEntity<Citizen> createCitizen(@RequestBody Citizen citizen);


    @ApiOperation(value = "Delete citizen by ID", notes = "Deletes a single Citizen", response = Void.class, tags={ "citizen", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Void.class),
        @ApiResponse(code = 400, message = "Invalid Citizen ID supplied", response = Void.class),
        @ApiResponse(code = 404, message = "Citizen not found", response = Void.class) })
    
    @RequestMapping(value = "/citizen/{citizenId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteCitizen(@ApiParam(value = "ID of Citizen to delete",required=true ) @PathVariable("citizenId") Long citizenId);


    @ApiOperation(value = "List citizens", notes = "Returns list of Citizen", response = Citizen.class, responseContainer = "List", tags={ "citizen", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Citizen.class, responseContainer = "List") })
    
    @RequestMapping(value = "/citizen",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Citizen>> getAllCitizens();


    @ApiOperation(value = "Find citizen by ID", notes = "Returns a single Citizen", response = Citizen.class, tags={ "citizen", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Citizen.class),
        @ApiResponse(code = 400, message = "Invalid Citizen ID supplied", response = Void.class),
        @ApiResponse(code = 404, message = "Citizen not found", response = Void.class) })
    
    @RequestMapping(value = "/citizen/{citizenId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Citizen> getCitizenDetails(@ApiParam(value = "ID of Citizen to return",required=true ) @PathVariable("citizenId") Long citizenId);


    @ApiOperation(value = "Update citizen", notes = "Updates an existing Citizen", response = Citizen.class, tags={ "citizen", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Citizen.class),
        @ApiResponse(code = 400, message = "Invalid input", response = Void.class),
        @ApiResponse(code = 404, message = "Citizen not found", response = Void.class) })
    
    @RequestMapping(value = "/citizen/{citizenId}",
        produces = { "application/json" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.PUT)
    ResponseEntity<Citizen> updateCitizen(@ApiParam(value = "ID of Citizen to update",required=true ) @PathVariable("citizenId") Long citizenId, @RequestBody Citizen citizen);

}
